{% sw_extends '@Administration/administration/index.html.twig' %}

{% block administration_templates %}
    <script nonce="{{ cspNonce }}">
        class EncodingHelper {

            static base64UrlDecode(data) {
                return window.atob(data.replace(/_/g, '/').replace(/-/g, '+'));
            }

            static base64Decode(data) {
                return window.atob(data);
            }

            static arrayToBase64String(array) {
                return window.btoa(String.fromCharCode(...array));
            }

            static toByteArray(string) {
                return Uint8Array.from(string, c=>c.charCodeAt(0));
            }
        }

        class ConverterHelper {

            static convertAuthenticatorData(data) {
                return {
                    id: data.id,
                    type: data.type,
                    rawId: EncodingHelper.arrayToBase64String(new Uint8Array(data.rawId)),
                    response: {
                        authenticatorData: EncodingHelper.arrayToBase64String(new Uint8Array(data.response.authenticatorData)),
                        clientDataJSON: EncodingHelper.arrayToBase64String(new Uint8Array(data.response.clientDataJSON)),
                        signature: EncodingHelper.arrayToBase64String(new Uint8Array(data.response.signature)),
                        userHandle: data.response.userHandle ? EncodingHelper.arrayToBase64String(new Uint8Array(data.response.userHandle)) : null,
                    },
                };
            }

            static convertOptions(options) {
                options.challenge = EncodingHelper.toByteArray(EncodingHelper.base64UrlDecode(options.challenge));
                if (options.allowCredentials) {
                    options.allowCredentials = options.allowCredentials.map(function(data) {
                        return {
                            ...data,
                            'id': EncodingHelper.toByteArray(EncodingHelper.base64UrlDecode(data.id)),
                        };
                    });
                }

                return options;
            }
        }

        class ApiClient {
            constructor() {
                this.httpClient = Shopware.Application.getContainer('init').httpClient;
            }

            challenge(username) {
                const headers = this.getHeaders();
                const payload = {
                    username: username
                };

                return this.httpClient
                    .post('/_action/reply-webauthn/login-options', payload, { headers })
                    .then(response => {
                        return response.data;
                    });
            }

            verify(username, credential) {
                const headers = this.getHeaders();
                const payload = {
                    client_id: 'administration',
                    grant_type: 'webauthn',
                    scopes: 'write',
                    username: username,
                    credential: credential
                };

                return window.fetch('/api/oauth/token', {
                    headers : headers,
                    method: 'POST',
                    body: JSON.stringify(payload)
                }).then(response => {
                    return response.json();
                });
            }

            getHeaders() {
                return {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                };
            }
        }

        class WebauthnLoginHandler {

            selectors = {
                usernameInput: '#sw-field--username',
                submitContainer: '.sw-login__submit'
            }

            init() {
                const submitContainer = document.querySelector(this.selectors.submitContainer);
                if (submitContainer) {
                    this.apiClient = new ApiClient();
                    this.loginService = Shopware.Application.getContainer('service').loginService;

                    var div = document.createElement('div');
                    var button = document.createElement('button');
                    button.innerText = 'Ohne Passwort einloggen';
                    button.classList.add('sw-button');
                    div.appendChild(button);

                    button.addEventListener('click', this._doLogin.bind(this));
                    submitContainer.appendChild(div);
                }
            }

            _doLogin(event) {
                event.preventDefault();
                const self = this;
                const username = document.querySelector(this.selectors.usernameInput).value;

                this.apiClient.challenge(username).then(function(response) {
                    navigator.credentials.get({publicKey: ConverterHelper.convertOptions(response)})
                        .then(authenticatorData => {
                            const credential = ConverterHelper.convertAuthenticatorData(authenticatorData);
                            self.apiClient.verify(username, credential).then(response => {
                                self.loginService.setBearerAuthentication({
                                    access: response.access_token,
                                    refresh: response.refresh_token,
                                    expiry: response.expires_in
                                });
                                window.location.href = '/admin';
                            });
                        }, error => {
                            console.log(error.toString()); // Example: timeout, interaction refused...
                        });
                });
            }
        }

        document.addEventListener("DOMContentLoaded", function() {
            let webauthn = new WebauthnLoginHandler();
            webauthn.init();
        });
    </script>
{% endblock %}
